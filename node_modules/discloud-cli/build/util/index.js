"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyRequiredFiles = exports.sortAppsBySameId = exports.resolveArgs = exports.arrayOfPathlikeProcessor = exports.objToString = exports.normalizePathlike = exports.makeTable = exports.getFileExt = exports.findDiscloudConfig = exports.aptValidator = exports.apidiscloud = exports.config = void 0;
const v2_1 = require("@discloudapp/api-types/v2");
const gluegun_1 = require("@discloudapp/gluegun");
const util_1 = require("@discloudapp/util");
const node_path_1 = require("node:path");
const node_process_1 = require("node:process");
const FsJson_1 = __importDefault(require("./FsJson"));
const constants_1 = require("./constants");
__exportStar(require("./FsJson"), exports);
__exportStar(require("./RateLimit"), exports);
__exportStar(require("./Zip"), exports);
exports.config = new class Config extends FsJson_1.default {
    constructor() {
        super(`${constants_1.configPath}/.cli`, { encoding: "base64" });
    }
};
exports.apidiscloud = gluegun_1.http.create({
    baseURL: v2_1.RouteBases.api,
    headers: {
        "api-token": exports.config.data.token,
        "User-Agent": `DiscloudCLI/${constants_1.version} (${constants_1.os_name} ${constants_1.os_release}; ${constants_1.os_platform}; ${constants_1.cpu_arch})`,
    },
});
function aptValidator(apts) {
    if (typeof apts === "string")
        apts = apts.split(/\W/g);
    return apts.map(apt => apt.toLowerCase()).filter(apt => v2_1.APTPackages.includes(apt));
}
exports.aptValidator = aptValidator;
function findDiscloudConfig(paths) {
    paths = paths.concat((0, node_process_1.cwd)());
    for (let path of paths) {
        path = path.replace(/\\/g, "/");
        const dConfig = new util_1.DiscloudConfig(path);
        if (dConfig.exists)
            return dConfig.path;
    }
}
exports.findDiscloudConfig = findDiscloudConfig;
function getFileExt(ext) {
    return constants_1.FileExt[ext] ?? ext;
}
exports.getFileExt = getFileExt;
function getKeys(array) {
    const keys = [];
    for (let i = 0; i < array.length; i++) {
        const element = array[i];
        keys.push(...Object.keys(element));
    }
    return [...new Set(keys)];
}
function getValues(array) {
    const keys = getKeys(array);
    const values = [];
    for (let i = 0; i < array.length; i++) {
        const element = array[i];
        const value = [];
        for (let j = 0; j < keys.length; j++) {
            const key = keys[j];
            value.push(objToString(element[key]));
        }
        values.push(value);
    }
    return { keys, values };
}
function makeTable(apps) {
    if (!apps)
        return [];
    if (!Array.isArray(apps))
        return makeTable([apps]);
    const { keys, values } = getValues(apps);
    return [keys, ...values];
}
exports.makeTable = makeTable;
function normalizePathlike(path = "**") {
    path = path.replace(/\\/g, "/");
    if (!(0, node_path_1.isAbsolute)(path))
        path = path.replace(/^(\.|~)$|^(\.|~)\/|^\/|\/$/g, "");
    return path;
}
exports.normalizePathlike = normalizePathlike;
function objToString(obj, sep = ": ") {
    if (!obj)
        return obj;
    const result = [];
    if (typeof obj === "object") {
        if (Array.isArray(obj)) {
            for (let i = 0; i < obj.length; i++)
                result.push(objToString(obj[i]));
        }
        else {
            const keys = Object.keys(obj);
            for (let i = 0; i < keys.length; i++)
                result.push(`${keys[i]}${sep}${objToString(obj[keys[i]])}`);
        }
    }
    else {
        result.push(obj);
    }
    return result.join("\n");
}
exports.objToString = objToString;
function arrayOfPathlikeProcessor(paths, files = []) {
    if (!paths?.length)
        paths = ["**"];
    for (let i = 0; i < paths.length; i++)
        files.push(...new util_1.GS(paths[i], ".discloudignore", ["."]).found);
    return Array.from(new Set(files));
}
exports.arrayOfPathlikeProcessor = arrayOfPathlikeProcessor;
function resolveArgs(args, options) {
    const resolved = {};
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        for (let j = 0; j < options.length; j++) {
            const option = options[j];
            if (option.pattern.test(arg)) {
                resolved[option.name] = arg;
                args.splice(i, 1);
                i--;
                options.splice(j, 1);
                j--;
            }
        }
    }
    return resolved;
}
exports.resolveArgs = resolveArgs;
function sortAppsBySameId(apps, id) {
    return apps.sort(a => a.id === id ? -1 : 1);
}
exports.sortAppsBySameId = sortAppsBySameId;
function verifyRequiredFiles(paths, ext, files = []) {
    const fileExt = getFileExt(ext);
    const requiredFiles = Object.values(constants_1.required_files[fileExt] ?? {}).concat(constants_1.required_files.common, files);
    for (let i = 0; i < requiredFiles.length; i++) {
        const file = requiredFiles[i];
        for (let j = 0; j < paths.length; j++) {
            const path = normalizePathlike(paths[j]);
            if (gluegun_1.filesystem.exists(`${path}/${file}`) || gluegun_1.filesystem.exists(file)) {
                requiredFiles.splice(i, 1);
                i--;
            }
        }
    }
    if (requiredFiles.length)
        return gluegun_1.print.error(`Missing: ${requiredFiles.join(", ")}`);
    return true;
}
exports.verifyRequiredFiles = verifyRequiredFiles;
