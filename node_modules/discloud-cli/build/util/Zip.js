"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeZipFromFileList = void 0;
const gluegun_1 = require("@discloudapp/gluegun");
const archiver_1 = __importDefault(require("archiver"));
async function makeZipFromFileList(files, fileName, debug) {
    const zipper = (0, archiver_1.default)("zip");
    const outFileName = fileName ?? `${process.cwd().split(/(\\|\/)/).pop()}.zip`;
    if (gluegun_1.filesystem.exists(outFileName))
        gluegun_1.filesystem.remove(outFileName);
    const output = gluegun_1.filesystem.createWriteStream(outFileName);
    zipper.pipe(output);
    let amountZippedFiles = 0;
    const spin = gluegun_1.print.spin({
        text: "Zipping files",
    });
    for (let i = 0; i < files.length; i++) {
        const name = files[i];
        try {
            if (gluegun_1.filesystem.isFile(name)) {
                if (debug)
                    spin.info(`[${i + 1}/${files.length}] Zipping: ${name}`);
                spin.text = `[${i + 1}/${files.length}] Zipping: ${name}`;
                zipper.file(name, { name });
            }
            else if (gluegun_1.filesystem.isDirectory(name)) {
                zipper.file(name, { name });
            }
            amountZippedFiles++;
        }
        catch (error) {
            spin.fail(`Error on zipping ${name}.`);
        }
    }
    spin.succeed(`[${amountZippedFiles}/${files.length}] Successfully zipped files.`);
    return zipper.finalize().then(() => outFileName);
}
exports.makeZipFromFileList = makeZipFromFileList;
