"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("@discloudapp/api-types/v2");
const form_data_1 = __importDefault(require("form-data"));
const util_1 = require("../util");
exports.default = {
    name: "team:commit",
    description: "Commit one app for your team.",
    alias: ["team:c"],
    async run(toolbox) {
        const { filesystem, parameters, print, prompt } = toolbox;
        const debug = parameters.options.d || parameters.options.debug;
        if (!util_1.config.data.token)
            return print.error("Please use login command before using this command.");
        if (util_1.RateLimit.isLimited)
            return print.error(`Rate limited until: ${util_1.RateLimit.limited}`);
        if (!parameters.array?.length)
            parameters.array = ["**"];
        const discloudConfigPath = (0, util_1.findDiscloudConfig)(parameters.array);
        if (!parameters.options.app || typeof parameters.options.app !== "string") {
            const { appId } = await prompt.fetchAndAskForApps({
                all: true,
                discloudConfigPath,
                url: v2_1.Routes.team(),
            });
            if (!appId)
                return print.error("Need app id to commit.");
            parameters.options.app = appId;
        }
        const formData = new form_data_1.default();
        if (/\.(zip)$/.test(parameters.array[0])) {
            if (!filesystem.exists(parameters.array[0]))
                return print.error(`${parameters.array[0]} file does not exists.`);
        }
        else {
            const allFiles = (0, util_1.arrayOfPathlikeProcessor)(parameters.array);
            print.debug(allFiles);
            if (!allFiles.length)
                return print.error("No files found!");
            parameters.array[0] = await (0, util_1.makeZipFromFileList)(allFiles, null, debug);
        }
        formData.append("file", filesystem.createReadStream(parameters.array[0]));
        const headers = formData.getHeaders({
            "api-token": util_1.config.data.token,
        });
        const spin = print.spin({
            text: print.colors.cyan("Commiting..."),
        });
        const apiRes = await util_1.apidiscloud.put(v2_1.Routes.teamCommit(parameters.options.app), formData, {
            timeout: 300000,
            headers,
        });
        new util_1.RateLimit(apiRes.headers);
        if (parameters.options.eraseZip !== false)
            filesystem.remove(parameters.array[0]);
        print.spinApiRes(apiRes, spin, { exitOnError: true });
        if (!apiRes.data)
            return;
        if ("logs" in apiRes.data)
            print.info(`[DISCLOUD API] ${apiRes.data.logs}`);
    },
};
