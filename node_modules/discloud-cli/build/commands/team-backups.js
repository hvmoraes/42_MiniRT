"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("@discloudapp/api-types/v2");
const axios_1 = __importDefault(require("axios"));
const util_1 = require("../util");
const constants_1 = require("../util/constants");
exports.default = {
    name: "team:backups",
    description: "Make backup from your team applications in Discloud.",
    alias: ["team:backup", "team:bkp", "team:b"],
    async run(toolbox) {
        const { filesystem, print, parameters } = toolbox;
        if (!util_1.config.data.token)
            return print.error("Please use login command before using this command.");
        if (util_1.RateLimit.isLimited)
            return print.error(`Rate limited until: ${util_1.RateLimit.limited}`);
        const id = parameters.first || "all";
        const spin = print.spin({
            text: print.colors.cyan("Fetching backups..."),
        });
        const apiRes = await util_1.apidiscloud.get(v2_1.Routes.teamBackup(id));
        new util_1.RateLimit(apiRes.headers);
        print.spinApiRes(apiRes, spin, { exitOnError: true });
        if (!apiRes.data)
            return;
        if ("backups" in apiRes.data) {
            if (parameters.options.save || parameters.options.s)
                if (Array.isArray(apiRes.data.backups)) {
                    for (let i = 0; i < apiRes.data.backups.length; i++) {
                        const backup = apiRes.data.backups[i];
                        if (backup.status === "ok") {
                            const outFileName = `${constants_1.backupsPath}/${backup.id}.zip`;
                            const spin = print.spin({
                                text: `Saving: ${outFileName}`,
                            });
                            try {
                                const result = await axios_1.default.get(backup.url, { responseType: "arraybuffer" });
                                filesystem.write(outFileName, result.data);
                                spin.succeed();
                                apiRes.data.backups[i].url = outFileName;
                            }
                            catch {
                                spin.fail();
                            }
                        }
                    }
                }
                else {
                    const backup = apiRes.data.backups;
                    const outFileName = `${constants_1.backupsPath}/${backup.id}.zip`;
                    const spin = print.spin({
                        text: `Saving: ${outFileName}`,
                    });
                    try {
                        const result = await axios_1.default.get(backup.url, { responseType: "arraybuffer" });
                        filesystem.write(outFileName, result.data);
                        spin.succeed();
                        apiRes.data.backups.url = outFileName;
                    }
                    catch {
                        spin.fail();
                    }
                }
            print.table((0, util_1.makeTable)(apiRes.data.backups), {
                format: "lean",
            });
        }
    },
};
