"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("@discloudapp/api-types/v2");
const util_1 = require("../util");
const constants_1 = require("../util/constants");
exports.default = {
    name: "apps:team",
    description: "Get team information of your applications.",
    alias: ["app:team"],
    async run(toolbox) {
        const { parameters, print, prompt } = toolbox;
        if (!util_1.config.data.token)
            return print.error("Please use login command before using this command.");
        if (util_1.RateLimit.isLimited)
            return print.error(`Rate limited until: ${util_1.RateLimit.limited}`);
        if (!parameters.first)
            return print.error("Need a param like APP_ID");
        let method = "get";
        if (Object.keys(parameters.options).length)
            method =
                (parameters.options.d ?? parameters.options.delete) ? "delete" :
                    (parameters.options.c ?? parameters.options.create) ? "post" :
                        (parameters.options.e ?? parameters.options.edit) ? "put" :
                            method;
        let perms = parameters.options.p ?? parameters.options.perms;
        if (["post", "put"].includes(method))
            if (!perms) {
                const { permissions } = await prompt.ask({
                    name: "permissions",
                    message: "Choose the permissions",
                    type: "multiselect",
                    choices: Object.keys(constants_1.ModPermissions),
                });
                perms = permissions;
            }
        if (typeof perms === "string")
            perms = perms === "all" ?
                Object.keys(constants_1.ModPermissions) :
                (parameters.options.p ?? parameters.options.perms ?? "").split(/\W+/);
        let modID;
        let action;
        switch (method) {
            case "delete":
                modID = parameters.options.d ?? parameters.options.delete;
                action = `Deleting ${modID} MOD from ${parameters.first} app...`;
                break;
            case "post":
                modID = parameters.options.c ?? parameters.options.create;
                action = `Creating ${modID} MOD with ${perms.length} permissions for ${parameters.first} app...` +
                    `${perms.length ? `\nPermissions: ${perms.join(", ")}` : ""}`;
                break;
            case "put":
                modID = parameters.options.e ?? parameters.options.edit;
                action = `Updating ${modID} MOD with ${perms.length} permissions for ${parameters.first} app...` +
                    `${perms.length ? `\nPermissions: ${perms.join(", ")}` : ""}`;
                break;
            default:
                action = "Fetching apps...";
                break;
        }
        const spin = print.spin({
            text: print.colors.cyan(action),
        });
        const apiRes = await util_1.apidiscloud[method](v2_1.Routes.appTeam(parameters.first, parameters.options.d ?? parameters.options.delete), ["post", "put"].includes(method) ? {
            modID,
            perms,
        } : undefined);
        new util_1.RateLimit(apiRes.headers);
        print.spinApiRes(apiRes, spin, { exitOnError: true });
        if (!apiRes.data)
            return;
        if ("app" in apiRes.data)
            print.table((0, util_1.makeTable)(apiRes.data.app), {
                format: "lean",
            });
        if ("team" in apiRes.data)
            print.table((0, util_1.makeTable)(apiRes.data.team), {
                format: "lean",
            });
    },
};
