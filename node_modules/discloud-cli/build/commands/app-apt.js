"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("@discloudapp/api-types/v2");
const util_1 = require("../util");
exports.default = {
    name: "app:apt",
    description: "Install or uninstall apt packages for you application.",
    alias: ["apt"],
    async run(toolbox) {
        const { parameters, print, prompt } = toolbox;
        if (!util_1.config.data.token)
            return print.error("Please use login command before using this command.");
        if (util_1.RateLimit.isLimited)
            return print.error(`Rate limited until: ${util_1.RateLimit.limited}`);
        const methods = {};
        if (parameters.options.i ?? parameters.options.install)
            methods.put = (0, util_1.aptValidator)(parameters.options.i ?? parameters.options.install);
        if (parameters.options.u ?? parameters.options.uninstall)
            methods.delete = (0, util_1.aptValidator)(parameters.options.u ?? parameters.options.uninstall);
        if (!(methods.put?.length || methods.delete?.length))
            return print.error("You need to use one of the options below:" +
                "\n  -i, --install [PACKAGE]   Install a package." +
                "\n  -u, --uninstall [PACKAGE] Uninstall a package." + "\n" +
                "\nPACKAGES:" + "\n" +
                v2_1.APTPackages.map(pkg => `  - ${pkg}: ${v2_1.APT[pkg]}`).join("\n"));
        if (!parameters.first) {
            const { appId } = await prompt.fetchAndAskForApps();
            if (!appId)
                return print.error("Need app id.");
            parameters.first = appId;
        }
        const keys = Object.keys(methods);
        for (let i = 0; i < keys.length; i++) {
            const method = keys[i];
            const apt = methods[method]?.join();
            let action;
            switch (method) {
                case "delete":
                    action = `Uninstalling ${apt} from ${parameters.first} app...`;
                    break;
                case "put":
                    action = `Installing ${apt} for ${parameters.first} app...`;
                    break;
                default:
                    action = "";
                    break;
            }
            const spin = print.spin({
                text: print.colors.cyan(action),
            });
            const apiRes = await util_1.apidiscloud[method](v2_1.Routes.appApt(parameters.first), ["delete", "put"].includes(method) ? {
                apt,
            } : undefined);
            new util_1.RateLimit(apiRes.headers);
            print.spinApiRes(apiRes, spin, { exitOnError: true });
        }
    },
};
