"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("@discloudapp/api-types/v2");
const util_1 = require("@discloudapp/util");
const form_data_1 = __importDefault(require("form-data"));
const node_process_1 = require("node:process");
const util_2 = require("../util");
const constants_1 = require("../util/constants");
exports.default = {
    name: "upload",
    description: "Upload one app or site to Discloud.",
    alias: ["up", "deploy"],
    async run(toolbox) {
        const { filesystem, parameters, print } = toolbox;
        const debug = parameters.options.d || parameters.options.debug;
        if (!util_2.config.data.token)
            return print.error("Please use login command before using this command.");
        if (util_2.RateLimit.isLimited)
            return print.error(`Rate limited until: ${util_2.RateLimit.limited}`);
        if (!parameters.array?.length)
            parameters.array = ["**"];
        const discloudConfigPath = (0, util_2.findDiscloudConfig)(parameters.array);
        print.debug("discloud config path:", discloudConfigPath);
        const dConfig = new util_1.DiscloudConfig(discloudConfigPath);
        const formData = new form_data_1.default();
        if (/\.(zip)$/.test(parameters.array[0])) {
            if (!filesystem.exists(parameters.array[0]))
                return print.error(`${parameters.array[0]} file does not exists.`);
        }
        else {
            if (!dConfig.exists)
                return print.error("discloud.config file is missing.");
            const missing = dConfig.missingProps;
            if (missing.length) {
                const missingProp = constants_1.mapDiscloudConfigProps[dConfig.data.TYPE]?.[missing[0]] ?? missing[0];
                return print.error(`${missingProp} param is missing from discloud.config`);
            }
            if (!(0, util_2.verifyRequiredFiles)(parameters.array, dConfig.fileExt, dConfig.data.MAIN))
                return;
            const allFiles = (0, util_2.arrayOfPathlikeProcessor)(parameters.array.concat(dConfig.path.replace(`${(0, node_process_1.cwd)()}\\`, "")));
            print.debug(allFiles);
            if (!allFiles.length)
                return print.error("No files found!");
            parameters.array[0] = await (0, util_2.makeZipFromFileList)(allFiles, null, debug);
        }
        formData.append("file", filesystem.createReadStream(parameters.array[0]), parameters.array[0]);
        const headers = formData.getHeaders({
            "api-token": util_2.config.data.token,
        });
        const spin = print.spin({
            text: print.colors.cyan("Uploading..."),
        });
        const apiRes = await util_2.apidiscloud.post(v2_1.Routes.upload(), formData, {
            timeout: 300000,
            headers,
        });
        new util_2.RateLimit(apiRes.headers);
        if (parameters.options.eraseZip !== false)
            filesystem.remove(parameters.array[0]);
        print.spinApiRes(apiRes, spin, { exitOnError: true });
        if (!apiRes.data)
            return;
        if ("app" in apiRes.data) {
            const app = apiRes.data.app;
            dConfig.update({ ID: app.id, AVATAR: app.avatarURL });
            print.table(Object.entries(app), {
                format: "lean",
            });
        }
        if ("logs" in apiRes.data)
            print.info(`[DISCLOUD API] ${apiRes.data.logs}`);
    },
};
