"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("@discloudapp/api-types/v2");
const util_1 = require("../util");
const constants_1 = require("../util/constants");
exports.default = {
    name: "logs",
    description: "View the logs from application in Discloud.",
    alias: ["l", "t", "terminal", "console", "consola"],
    async run(toolbox) {
        const { filesystem, print, parameters } = toolbox;
        if (!util_1.config.data.token)
            return print.error("Please use login command before using this command.");
        if (util_1.RateLimit.isLimited)
            return print.error(`Rate limited until: ${util_1.RateLimit.limited}`);
        const id = parameters.first || "all";
        const spin = print.spin({
            text: print.colors.cyan("Fetching logs..."),
        });
        const apiRes = await util_1.apidiscloud.get(v2_1.Routes.appLogs(id));
        new util_1.RateLimit(apiRes.headers);
        print.spinApiRes(apiRes, spin, { exitOnError: true });
        if (!apiRes.data)
            return;
        if (Array.isArray(apiRes.data.apps)) {
            const terminal = [];
            for (let i = 0; i < apiRes.data.apps.length; i++) {
                const app = apiRes.data.apps[i];
                const terminalParams = [
                    "", "-".repeat(60),
                    new Date().toString(),
                    "",
                    app.terminal.big,
                ];
                const uri = `${constants_1.logsPath}/${app.id}.log`;
                filesystem.append(uri, terminalParams.join("\n"));
                terminal.push([app.id, uri]);
            }
            print.table(terminal, {
                format: "lean",
            });
        }
        else {
            const terminal = apiRes.data.apps.terminal;
            const terminalParams = [
                "", "-".repeat(60),
                new Date().toString(),
                "",
                terminal.big,
            ];
            const uri = `${constants_1.logsPath}/${id}.log`;
            filesystem.append(uri, terminalParams.join("\n"));
            print.table([[id, uri]]);
        }
    },
};
